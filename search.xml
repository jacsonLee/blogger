<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Ubantu下安装JDK]]></title>
    <url>%2Fblogger%2F2017%2F09%2F07%2Fubuntu_install_jdk%2F</url>
    <content type="text"><![CDATA[为了愉快地玩idea,决定在linux下装phpstorm跟webstorm.结果两个都要求装java环境.师兄们建议安装sunjdk,弄了一下搞定了,做下记录 第一步:下载地址:http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html 然后选择同意Licese,下载tar.gz压缩包 第二步:解压解压tar.gz包都是用tar zxvf命令(进入到当前目录) 1sudo tar zxvf ./jdk-8u45-linux-x64.tar.gz 第三步:设置环境变量设置环境变量需要使用.bashrc这个文件cd ~ 进入到根目录,ls -a 即可查看到.bashrc这个隐藏目录 注:修改.bashrc之前最好先备份一下1cp .bashrc .bash_original 然后使用vi或者vim编辑.bashrc文件 1vim ~/.bashrc 在该文件的末尾添加以下代码 123export JAVA_HOME=/home/jason/DOwnloads/jdk export CLASSPATH=$&#123;JAVA_HOME&#125;/lib:.export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH JAVA_HOME存放的是jdk的安装目录. 设置CLASSPATH时候,加上当前目录(.) 设置PATH的时候,export PATH=${JAVA_HOME}/bin:$PATH,$PATH前的连接符号是冒号(:).win下是分号(;) 为了让修改立刻生效,在终端执行以下命令:1source ~/.bashrc 第四步:验证在终端输入 1java -version 看到类似下图,说明你成功了.]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2016总结]]></title>
    <url>%2Fblogger%2F2017%2F02%2F17%2F2016summary%2F</url>
    <content type="text"><![CDATA[2016年总结 那一天 我闭目在经殿香雾中 蓦然听见你颂经中的真言那一月 我摇动所有的转经筒 不为超度 只为触摸你的指尖那一年 我磕长头匍匐在山路 不为觐见 只为贴着你的温暖 又一年过去了，今年我的年终总结来得格外迟。究其原因，因为特别乏，没空是借口，没心情或者懒才是真。其他朋友也没见怎么写，估计大家都比较忙吧。 工作 今年八月，在口袋香港工作了一年零一个月之后，我向我工作的第一家公司提出辞职。8月17日，我正式离开了这家公司。这里给了我第一份工作，我是很感激它的，若非事出突然，我也不想离开。离开对我而言，真是既喜又忧，喜在自己可以换个环境，去面对新的东西，忧在前途渺茫，像只没脚的小鸟。当然对我来说，除非是自己的事业，否则即便给我灌再多鸡汤，都很难给我公司是个家庭的感觉。对我而言，雇主们自己住在豪华别墅，开着顶级轿车，却也变相压榨这劳动者的价值，虽说确实是他们创造了就业机会，给了我们生存乃至于生活的可能，但是处于食物链的最低端，往往会觉得非常不甘心。又或者，是我太浮躁了吧。不管怎样，大方向是没错的，继续走就是了。 毕业 把头发梳成大人模样 严寒烈日，青年广场，孔子像前，摄像头对准形形色色的学子们，梳得整齐的头发，修长庄严的学士服，十二月是属于他们的月份，毕业的钟声敲响，他们即将走出校园，等待他们的是这个残酷的商业社会，然而他们的笑容却在回应着，他们可以面对这一切。铁打的营盘，流水的兵，跟我相熟的师兄师姐们一届接着一届走出了校门，终于到我们了！我的心情是凝重的，大概是在外面折腾了一年多，对美好的校园生活不免产生眷恋。但归根究底，眷恋地只是这些人，而不是校园。大学对我来说是一座围城，刚上大学不久，心里总是嘀咕着怎么快点出社会，早点去闯荡。走出去了，才发现外面有多么艰辛，多么疲惫，自己又是多么地桀骜不驯，妄自尊大。现在的我，多想常常回学校走走，不太喜欢以往的浪子心态，取而代之的是想让自己沉稳一些，老练一些，谦和一些。纵观大学四年，我大部分时间都献给了学习和工作，奋斗二字站在道德的制高点上绑架了自己，虽然增长了我的技能和见识，却也给了我无尽的疲惫和孤苦，倘若还能选择一次，我会取个中间值，在二者之间找到平衡点。事已至此，无论如何，还是非常感谢我的大学，认识了很多很棒的人，结交了很多好友，也学会了学习，做人，处事。 爱情 今年，我终于谈恋爱了，迈出这一步对我而言，确实不易！一方面事业未定，前途未卜，另一方面我自知生性生性怯懦，幸运的是，那个月光慵懒的夜晚，在我紧握她的手腕之时，她答应了。那一夜，我开心得难以入眠。相处下来，偶有矛盾和口角，但都是我的错，我生性孤僻，不善言辞，常常忽略了她。加之我为人愚笨，驽钝不堪，没有很好地关心她，实在惭愧之至。开始总是轻描淡写，从朋友到恋人，关系变了，看待对方的眼光变了，暴露给对方的自己也更多了，女朋友说几乎重新认识了我这个人，但是在我眼里，她其实还是那样，单纯，善良，倔强，对人无微不至。新年伊始，元旦的时候，我们去旅游了，然而我表现非常糟糕，惹恼了她。回去之后，我曾多次反思，深感自己极度机器木讷，对感情非常迟钝，乃至于常常忽略身边的人。大一的时候，吕志和上台讲话的老师提倡同学们去谈恋爱，以前我不懂，现在总算是明白了，会关心别人，有同理心，站在别人的角度去思考问题，是一个男生必须具备的。对于我自己，我是很惭愧的。自己能力微弱，妄自尊大，天天做着白日梦，想着经济自由，时至今日却只能忧心无法给她幸福，担心会让她受委屈。现实残酷，现在的我努力工作，剑走偏锋，虽说是为了亲人能过上更好的生活，但诚然，如果一个人把事业看的比亲情爱情还重要，那么这个人的人生也是失败的。相信现在的自己，依然是笨蛋一个，但我会找到事业和爱情的平衡点，因为有些东西，一旦失去，就再也不会回来了。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>年底总结</tag>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单例模式]]></title>
    <url>%2Fblogger%2F2016%2F11%2F28%2Fsingleton%2F</url>
    <content type="text"><![CDATA[特点：1.单例类只有一个实例2.单例类必须自己创建自己的唯一实例3.必须有私有的构造方法4.单例类必须给所有其他对象提供这一实例,必须有一个以自己实例为返回值的静态公有方法 饿汉式单例模式12345678public class Singleton&#123; private static Singleton singleton = new Signleton(); private Singleton()&#123;&#125; public static Singleton getInstance()&#123; return singleton; &#125; &#125; 懒汉单例模式1.普通懒汉 （多线程会失败） 123456789101112131415public class Singleton &#123; private static Singleton singleton; private Singleton() &#123; &#125; public static synchronized Singleton getInstance()&#123; if (singleton == null)&#123; singleton = new Singleton(); &#125; return singleton; &#125;&#125; 2.双重锁定检查 （DCL） 12345678910public static Singleton getInstance()&#123; if (singleton == null)&#123; synchronized (Singleton.class)&#123; if (singleton == null)&#123; singleton = new Singleton(); &#125; &#125; &#125; return singleton;&#125; 3.延迟初始化占位（Holder）类模式 1234567891011121314public class Singleton &#123; private static class LazyHolder &#123; private static final Singleton INSTANCE = new Singleton(); &#125; private Singleton() &#123; &#125; public static final Singleton getInstance()&#123; return LazyHolder.INSTANCE; &#125;&#125; 第三种方式最优,一个静态内部类（占位类），在内部类中提前初始化实例，既保证了Singleton实例的延迟初始化，又保证了同步。这是一种提前初始化（饿汉式）和延迟初始化（懒汉式）的综合模式 优缺优点 节省内存空间（只有一个对象） 避免频繁的开销 避免对共享资源的多重占用 全局访问 缺点 线程安全问题,饿汉式天生就是线程安全,懒汉式的话,为了线程安全的问题，才实现了以上三种方式。 三种懒汉模式的区别1.在方法调用上加了同步关键字,虽然线程安全了，但每次都要同步，影响性能。非多线程环境下,基本99%的场景应该都不需要同步。2.在getInstance中做了两次null检查,确保了只有第一次调用单例的时候才会做同步,解决了安全问题，也避免了资源消耗,但会存在指令重排序问题。3.利用了classloader的机制来保证初始化instance时只有一个线程，所以也是线程安全的，同时没有性能损耗，所以一般我倾向于使用这一种。 参考: 1.http://blog.csdn.net/zhangzeyuaaa/article/details/426732452.http://blog.csdn.net/jason0539/article/details/23297037/]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx反向代理]]></title>
    <url>%2Fblogger%2F2016%2F05%2F16%2Fnginxreverseproxy%2F</url>
    <content type="text"><![CDATA[今天遇到个问题:因为业务上的一些需求,我需要使用旧的asp的接口.请求旧接口的时候,有点悲剧，服务端没有做cors,也没采取jwt的方案。只能用代理把请求转发出去,才能拿到数据了 正向代理和反向代理的区别 回来的路上,一个朋友问我正向代理和反向代理的区别,结果讲不出来 正向代理: 正向代理就是平时说的代理,比如我要访问一个网站,那个网站不给我访问,但是代理服务器可以访问,我就叫代理服务器去访问那个网站,然后拿到我想要的东西。说那么多,其实就是个跳板,用过翻墙软件的人 基本可以秒懂 ! 反向代理: 客户端访问一个服务器A要数据包M,事实上服务器A没有数据包M,但是服务器B有数据包M,然后服务器A去服务器B那里拿数据包M,然后再返回给客户端。这里就可以说 服务器A设置了反向代理。对于客户端来说,服务器A就是提供原始服务的服务器。 两者听起来好像没啥区别,区别就在于:1.正向代理,客户端需要设置一些东西,反向代理,客户端没啥好做的！2.正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。(典型例子:通过vpn访问google)。反向代理的典型用途是将 防火墙后面的服务器提供给Internet用户访问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。（典型例子:第三方的可以访问google的网站）3.正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。 nginx设置 nginx安装 就不多说了 网上一大把 首先需要科普一下 nginx配置文件里面的东西 看这篇文章 https://segmentfault.com/a/1190000002797601 我这里直入操作 第一步： 编辑nginx的配置文件,我这里采用的是atom来进行编辑,当然因为vim比较蛋疼 我比较懒的缘故,基本上把proxy_pass跟主机名还有响应头设置好就可以了 第二步： 编辑host文件 这样的话 访问流程就是 localhost:3000 -&gt; request -&gt; (proxy: apitest.com) -&gt; proxypass -&gt; (dist: www.xxxx.com) 第三步： 客户端写个ajax去试验一下 200成功拿到数据！这样就不用搞cors或者jwt了,服务端在同域的设置下,你也可以这样子来做开发,最后改下主机名,然后把代码扔进去就可以了。 写的不好,有任何问题可以联系我。欢迎打脸,多学习交流！]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>服务器</tag>
        <tag>反向代理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[迁移你的eclipse项目到IntellJIDEA]]></title>
    <url>%2Fblogger%2F2016%2F03%2F22%2Feclipse2Ij%2F</url>
    <content type="text"><![CDATA[图片居多,跟着图来做即可 step1. 打开IJ,选择导入你的eclipse项目,跟着下面三幅图操作吧！ step2.导入之后 肯定报一大堆错误,其实只要重新调整一下项目的结构即可 project那个项 基本不需要看 大概知道每个啥意思就可以了2. 选择module模块,点击+号,把项目加载进来，注意选择成web工程！ 点击你的项目,添加一个ApplicationServerlibrary,因为后面要使用tomcat,所以要在这里加入对应的library 加入tomcat之后呢,点击web,选择成为web工程之后,肯定要配置一下对应的东西不是? 右上部分选择的是web.xml的配置文件的路径 右下部分选的是的webContent的目录 step3把工程目录建立好之后,下一步就是引jar了,点+号你的项目对应的放jar的目录即可 step4接下来建立一个Facets 基本上跟module的web部分的配置一样右上是web.xml,右下是WebContent的目录,配置好这两步的时候右下角会有警告,就是要我们去弄Artifacts step5 artifacets翻译过来是工件,个人愚见,应该是指工程里面某个阶段的产物!在这里！讲的那么高大上,其实就是要你配置一下打包输出的目录即可 step6接下来是tomcat的配置,看图应该都懂的了,最后点击三角形跑起来 恭喜恭喜 结语: 时间仓促,写的不好,有任何问题都可以联系我! 微博 email:lizhixiong498056754@gmail.com Github]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
        <tag>Java</tag>
        <tag>IntellJIDEA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在年末]]></title>
    <url>%2Fblogger%2F2015%2F12%2F31%2FWriteInTheEndOfYear%2F</url>
    <content type="text"><![CDATA[写在年末 没有一瞬间的脱胎换骨，生命是一次次的试探，也是一场且行且至的寻觅。 有感此刻,外面是无尽的喧嚣,而我仿佛已过了去倒数为新年欢庆不已的年龄。人活一世古来稀,少小十年,老大十年,夏暑冬严,刮风下雨,算了一下,人生不过二十五载,生命多么短暂。天地不仁,以万物为刍狗。每每看到中年人庸庸碌碌,惶惶不可终日,下意识提醒自己:劝君惜取少年时！太久没动笔,虽然平时思考之余,常常思绪纷飞,但是眼下却显得彷徨了。’彷徨’正是我这一年的缩影! 毕业季 你没了归期,这便是离别的意义. 今年的六月,大我两届的师兄们在一片载歌载舞中欢然离校！而我不免感伤,大学两年,我跟同届的人几乎没有太多交流,或因为我觉得他们过于幼稚,又或者我太过骄傲,不愿随便与人为伍。而跟待我如师亦友的师兄们在一起的时候,我们都会不自觉地成为话唠,大抵因为有些朋友与时间无关,大家兴趣相近又志趣相投吧。十一月初,则是大我一届的老大们毕业了,想着跟他们同期进来,而他们则先一步离开了工作室,如今只剩我一人留在学校,不免百感交集。虽然心里充满不舍,但我还是蛮替大家开心。比起大学里面的大多数人,他们都有光明的前途,美好的未来,更有一身本领,特立独行的思想,不说去推动社会命运的时代巨轮,起码能让家人朋友感到安全,放心,能在自己的一片领域开天辟地,做出骄人成绩,我时常以他们为榜样,告诫自己要多向这些踏实,聪明而又有点偏执的家伙们学习,毕竟我比起他们,自我感觉,资质驽钝,努力不够,要走的路还很长。 土豪的一个项目 时代会为你做出选择，不管你是否愿意。 三月份,开学伊始,浙江商会的一个土豪老板找到我们,让工作室在校内帮忙宣传并推广他们的APP。一开始路子走的还算正常。但是随着老师的介入,结果APP倒是成了创业浪潮里面的展品,被拿去参加比赛。虽然我心里非常反对,但是也不好多说什么。还是认真写我的代码,好好为假期去中国电信的实习做好准备。最后,果不其然,老师因为比赛的结果不理想,又要更换团队,当然我这个刺头果然首当其冲,被人三番四次地吐槽,反正我早习惯了,也不想在这种破事上浪费生命。好好的一个APP,运营就运营,推广就推广，要做开发就开发嘛!干嘛去参加那种毫无意义站在台上吹牛的比赛!总以为所有的舞台都是TechCrunch.每个上台的队伍都是DropBox!后来我明白了:学院的老师每年要评职称,必须要拿奖出书什么的。于是到处怂恿学生去参加各种比赛！果不其然后来项目好像又去参加了什么吉林省的互联网+比赛,老师还扬言有什么比赛就参加什么比赛。可怜是这群有追求的学生,虽然努力,却看不清真正重要的东西，大学四年下来没有好好沉淀自己,反而把时间浪费掉了。还好我那段时间没有浪费掉,虽然手上没有项目,但是我一直都在学习,还开始入门了前端,无意间为后面在广州的实习做了准备。整个项目下来,我跟土豪老板的交流很多,给我最大的感受就是：传统行业的人很难做得了互联网。 传统行业的老板以为员工可以量化,加人加班加点,东西就能做好,以为有钱什么都可以干。事实上,互联网产品用心跟不用心,做出来的效果相差太多了,人员的管理和配备上哪里是那种流水线上的螺丝钉式的安排,尤其是在创业公司。 其次缺失对互联网自由开放思想的理解,他们竟然可以愚蠢到随意更改APP的名字,更是提了些千奇百怪的需求,比如在一个群聊里面发小学生那种奖状,群聊里面搞严重的层级制度。。。 工作&amp;学习 脚下的路通往何方,还需要自己去寻找答案 七月中旬,我没有联系电信副总也没去土豪的公司,只身上了广州!至于在口袋香港实习的那一笔流水账,就不在这里赘述了。简单谈谈工作吧,九月开始,我原计划是打算实习结束直接待公司那边干活,但是无奈学校课程太多,计算机学院的脑残领导还一堆破烂点名制度,于是我申请了回来远程工作。远程工作比较麻烦的一个地方当然是交流,幸好有Allen的设计稿,还有我实习时给公司提议统一使用markdown写接口文档,并跟大家统一商量好了格式,不然现在还要看word文档或者txt,想想就觉得惨!所以我基本上看设计稿跟接口文档就可以完成工作,不需要太多的交流,真是棒棒哒!至于学习上,感觉有点落后了,每天忙着应付学校,然后又要赶公司的进度,没太多时间学习新东西,非常惭愧。幸好项目驱动,还有就是自己脸皮够厚,经常缠着师兄们问这问那,对前端的有了进一步的了解。10月中旬的时候,老板打了一次电话给我,她让我给自己最终选择一个方向,最后我选了后端,大一大二学的是android,实习时候做的是前端的工作,最后自己却决定要写后台。至于为什么？喜欢挑战自己是一方面,另一方面则是公司需求,加上项目驱动,成长速度会很快。在创业公司待的这几个月,给我最大的感受就是:我以前只关注技术,总以为技术就是一切,事实上你开始了解商业社会是怎么运作的话,你会发现一流的发展速度+三流的品质能够战胜三流的发展速度+一流的品质。而对于个人而言,不仅仅是你的本身的技能,其他知识,天赋,经历和人脉上都可以成为你的个人价值。 关于创业 未来的变数太多，而我所能做的，就是走好这一步。 经济社会,物欲横流。在这个梦想贫瘠的时代,我们都渴望年少时成为英雄。于是无数人走上了创业这条路,或为追名逐利,或为人前显贵,或为人生价值。然而无数的人最终沦为潮流的炮灰,梦想则成了时代的祭品。于我而言,”回首往事,不因碌碌无为而羞耻,不为荒度岁月而落泪”便已足矣。现在选择待在创业公司,一方面是欣赏三个创始人,另一方面则是明白一旦自己跑去一家大公司,开始习惯里面的环境,最后也许一辈子都不会去startup!(还有就是我现在没那么多选择!哈哈哈。)而趁着年轻,身上没什么负担,放手一搏是最为明智的选择。 来年计划看去年给自己定下的计划,买macbook,iphone,学习,养活自己等等等基本上都做到了。关于来年,我并无太多的想法,如果真要给自己定几项计划: 抽多点时间回去陪爸妈 有机会去一趟硅谷 正常完成所有的课业 认真写后台 有空多跟英爷一起搞开源 最后废话两句世界上不缺伟大的想法,缺乏伟大的执行力,前路漫漫,踏实笃行。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>年底总结</tag>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web前端页面速度优化的多条建议]]></title>
    <url>%2Fblogger%2F2015%2F11%2F01%2FwebPerformance%2F</url>
    <content type="text"><![CDATA[Web性能优化这个词既可以解读成页面加载速度（Page Speed）的优化，也可以解读成页面渲染性能（Page Performance）的优化。或者是二者的集合。 1.合并静态资源,进来减少HTTP请求个数包括CSS、JavaScript和小图片，减少HTTP请求.但是又要合适考虑合并之后的文件体积,具体合并与否需要看场景 2.使用CDN或者一些公共库使用第三方提供的静态资源地址(比如Jquery,normalize.css).一方面增加并发下载量,另一方面能够和其他网站共享缓存. 3.添加Expire/Cache-Control头Expire:expire的内容是一个时间值,值就是资源在本地的过期时间,存在本地,在本地缓存阶段,找到一个对应的资源值.如果当前时间还没有超过资源的过期时间,就直接使用哪个这一本地资源,不会发送http请求.Cache-Control:顾名思义，这个是负责页面缓存机制的头,如果该头部指示缓存,缓存的内容也会存在本地.但相比Expire,Cache-Control有更多的选项,也有更多的处理方式 4.开启服务器端的Gzip压缩这对文本资源非常有效,对图片资源则没有那么大的压缩比例. 5.把CSS放到页面头部,把Javascript放在页面底部因为浏览器先解析html+css,把结构给显示出来,如果先执行javascript脚本,则会阻塞页面渲染,让页面出现长时间的空白 6.避免在CSS中使用Expressions简单举个CSS表达式的例子: 123456789101112131415161718192021&lt;html&gt;&lt;script type=&quot;text/javascript&quot;&gt; var i = 0; function scare()&#123; i++; document.getElementById(&apos;run&apos;).value = i; return; &#125;&lt;/script&gt;&lt;style type=&quot;text/css&quot;&gt;ul a &#123;witdh:expression(this.offsetWidth &gt; 750 ? scare() : scare());&#125;&lt;/style&gt;&lt;body&gt;当鼠标移动时,cssExpression计算了&lt;input id=&quot;run&quot;&gt;次&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;aaa&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;bbb&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;ccc&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;html&gt; 7.避免空的src和href留意具有这两个属性的标签如link，script，img，iframe等；src被javascript动态赋值的时候,会发多一个http请求,href标签也是同理。 8.将CSS和JS放到外部文件如果部分css跟js只在一个页面出现,则可以考虑css内联。重用的css跟javascript则单独放置于外部. 9.减少DNS查询当你输入www.baidu.com到你的浏览器时，一个连接到你的浏览器的DNS解析器返回该服务器的IP地址.DNS查询是有代价的。通常，需要20-120毫秒查找特定主机名的IP地址。在DNS查询完成前，浏览器无法从该主机下载任何东西。为了更好的性能表现，DNS查询是被缓存的。在一个特殊的缓存服务器上可以缓存这些信息，它由用户的ISP或局域网设备维护，同时用户的计算机也由缓存。DNS信息仍保留在操作系统的DNS缓存中（。大多数浏览器都有自己的缓存，它们独立于操作系统的缓存。只要浏览器在自己的缓存中有了DNS记录，它不会为每个请求都访问操作系统中的记录.当客户端的DNS缓存是空的（包括浏览器和操作系统），DNS查询数目等于网页中独立的主机名数量。这包括在网页的网址，图片，脚本，样式，Flash等等的URL中。减少独立的主机名数量就减少了DNS查询次数.减少了独特的主机名有可能减少该网页中并行下载的能力。避免DNS查询减少了响应时间，但是减少并行下载能力可能会增加响应时间。我的准则就是这些组件至少两个主机名，但不超过4个。这样做就可以很好的折衷减少DNS查询，并有高度的并行下载能力.浏览器缓存时间缓存时间长：减少DNS重复查找,节省时间缓存时间短：及时检测服务器的变化,保证正确性 所以可以根据网站性质的不同 做不同的处理,确定用几个域名来处理自己的网站是最合适的 10.压缩源码和图片JavaScript文件源代码可以采用混淆压缩的方式，CSS文件源代码进行普通压缩，JPG图片可以根据具体质量来压缩为50%到70%，PNG可以使用一些开源压缩软件来压缩，比如24色变成8色、去掉一些PNG格式信息等.可以考虑压缩工具JSMin和YUICompressor 11.避免跳转,重定向重定向一般使用301或302状态码完成.来看一个http头中的301响应的重定向：HTTP/1.1 301 Moved PermanentlyLocation: http://example.com/newuriContent-Type: text/html浏览器会自动将用户重定向到Location字段中指定的网址。所有必要的信息都在头信息中。响应体通常是空的。301、302响应是在实际中是不缓存的，除非特地用Expires或Cache-Control表明。HTML的Meta Refresh标签或用JavaScript也可以将用户定向到不同的网址，但如果你必须做重定向，首选的方法是使用标准的3xx HTTP状态码，主要是为了确保浏览器后退按钮的正常工作.其中最浪费的重定向频繁地发生和Web开发人员通常都不知道这件事。它发生在结尾缺少斜线“/”的URL，结尾应该有“/”。例如，要访问http://astrology.yahoo.com/astrology，结果一个301响应重定向到了http://astrology.yahoo.com/astrology/（注意“/”）。如果你使用的是Apache，在其中使用Alias或mod_rewrite或DirectorySlash指令修复了这个问题。如果两个代码路径托管在同一台服务器上，替代方式是使用Alias和mod_rewrite。如果一个域名变化的原因需要使用重定向，替代方式是创建CNAME（一个DNS记录，创造了一个指向另一个网域名称的别名），结合使用Alias或mod_rewrite 。 12.剔除重复的JS和css重复调用脚本,一方面增加额外的http请求,另一方面还会造成多次运算.IE和Firefox不管脚本是否缓存,都会重复计算javascript. 13.配置ETagsEntity tags(ETags)(实体标签)是web服务器和浏览器用于判断浏览器缓存中的内容和服务器中的原始内容是否匹配的一种机制(“实体”就是所说的”内容”,包括图片,脚本,样式等),是比last-modified date更灵活的机制,单位时间内文件被修过多次,ETag可以综合Inode(文件的索引节点(inode)数),MTime(修改时间)和Size来精准进行判断,避免UNIX记录MTime只能精确到秒的问题.服务器集群是使用,可取后两个参数。使用ETags减少web应用带宽和负载.例如:HTTP/1.1 200 OKLast-Modified: Tue, 12 Dec 2006 03:03:59 GMTETag: “10c24bc-4ab-457e1c1f”Content-Length: 12195 如果浏览器要验证该组件,它就使用If-None-Match头把接收到得ETag信息发送回原始服务器.如果ETag匹配上了,服务器就直接返回304状态码以节省开销,例如:GET /i/yahoo.gif HTTP/1.1Host: us.yimg.comIf-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMTIf-None-Match: “10c24bc-4ab-457e1c1f” HTTP/1.1 304 Not Modified 14.选择合适的图片格式如果图片颜色数较多就使用JPG格式，如果图片颜色数较少就使用PNG格式，如果能够通过服务器端判断浏览器支持WebP，那么就使用WebP格式和SVG格式. 15.使用AJAX可缓存利用时间戳,更精巧的实现响应可缓存与服务器数据同步更新 16.使用GET来完成AJAX请求当使用XMLHttpRequest时,浏览器中的POST方法是一个“两步走”的过程:首先发送文件头,然后才发送数据.在url小于2K时使用GET获取数据。 17.组件延迟加载哪些是渲染这个页面必需的。剩下的内容都可以等到后来加载.JavaScript可以非常理想地根据需要切分成onload事件之前部分和之后部分。例如：你有JavaScript代码和库来实现拖拽和动画功能，这些都能后加载，因为拖拽是在页面初始化渲染之后。其他如隐藏的内容（用户动作触发才显示）和展开折叠才显示的图片等ex:YUI Image Loader让你能延时加载折叠下面的图片,YUIGet能在运行时加载JS和CSS文件,用firebug的网络面板查看Yahoo！Yahoo的首页加载过程,就是一个很好的例子 18.组件预加载预加载（preload）看上去和后加载（post-load）相反，但是实际上它们的目的完全不同。预加载组件是浏览器空闲时请求组件（例如：图片，样式和脚本），这些资源你可能在未来会用到。用这种方法，当你访问下一个页面时会发现需要的大部分资源已经在浏览器的cache里面了，页面的加载速度就会很快。预加载的几种方式:1.无条件预加载ex:google.com是在onload事件里面预加载一个sprite图片.sprite图片在google.com首页中没有用到,但是在后面的搜索结果中就用到了 2.条件预加载基于用户动作,做出推测,预测用户下一个要去的页面,进行相应的预加载.在search.yahoo.com你能看到当你开始在输入框中输入时一些预加载额外资源的请求. 3.预测预加载通常在改版前进行的预加载。ex:新站点很酷,但是比以前慢了。部分原因可能是用户访问你老站点时带着cache,而访问你的新站点时,cache是空的.你可以在改版上线前用该方法减少这种负面的影响:老站点页面在浏览器空闲时加载一些在新站点会用到的资源文件 19.减少DOM访问用javascript访问DOM元素非常慢,为了有一个相应更快的页面,你应该: 把访问过的元素对象做cache 以”离线”方式更新节点,然后添加到DOM树里 避免使用Javascript来fix布局问题 20.根据域名划分页面内容拆分组件分布的域名可以增加并行加载能力。但是,务必不要多于4个域名,那样会带来更多的DNS查询而浪费资源的后果.ex:你的html和你的动态内容在www.example.org上,将静态的组件拆分到static1.example.org和static2.example.org上 21.尽量减少iframe的个数iframe允许在父文档里面插入一个html文档。iframe优点 对速度比较慢得第三方内容有帮助.比如:广告,徽章 安全沙箱 内外脚本并行下载 iframe缺点 即使iframe是空的,消耗的资源也是比较多的 阻塞了页面的onload事件 非语义化 22.避免404HTTP请求时间消耗是很大的，有些站点把404错误响应页面改为“你是不是要找*”，这虽然改进了用户体验但是同样也会浪费服务器资源（如数据库等）。最糟糕的情况是指向外部 JavaScript的链接出现问题并返回404代码。首先，这种加载会破坏并行加载；其次浏览器会把试图在返回的404响应内容中找到可能有用的部分当作JavaScript代码来执行。 23.减少Cookie的大小因为很多理由需要使用cookie，例如：认证，个性化等。cookie在HTTP头信息，是服务器和浏览器之间的信息交互。为了最大程度地降低对用户响应时间的影响，需要让cookie的大小尽量最小化。 总结: 取消没有必要的cookie cookie尽量小,对响应时间影响尽量少 设置cookie时要设置到合适的子域下,这样才不影响其他子域 设置合理的过期时间。让cookie早点过去或者不设置时间(session cookie)可以改善响应时间 24.使用无cookie的域浏览器请求一个静态的图片时也会发送cookie数据，然而服务器可能根本就不用这些cookie，那它们只会浪费网络带宽，没有理由被发送。务必将静态的组件放在cookie-free的域名下面。你可以创建一个子域名来放置你所有的静态组件. 如果你的web域名时www.example.org，你的静态组件可以域名是static.example.org。尽管如此，如果你在顶级域名example.org上而不是在www.example.org上设置了cookie的话，在请求static.example.org上的静态组件时cookie仍然会被发送过去。针对上面的例子，你应该重新买个（顶级）域名。Yahoo！使用yimg.com，YouTube使用ytimg.com，Amazon使用images-amazon.com等等。 使用cookie-free的域名还有一个好处：有些代理服务器会拒绝为有cookie数据提交的请求使用cache技术，cookie-free就可以使用cache。 25.减少DOM元素个数使用更适合或者在语意是更贴切的标签，要考虑大量DOM元素中循环的性能开销。 26.开发智能事件处理程序有时候感觉页面对动作的响应比较慢，很有可能是因为在DOM树不同的元素上添加的事件处理太多了，它们被执行的太频繁了。这样的情况下用事件代表团的方式出来比较好。例如：有10个按钮在一个div中，只需要给div上添加一个事件处理函数，包装一下避免给10个按钮都加上事件处理函数了。事件冒泡上来，处理函数捕获到，并能分析出来源自哪个按钮，做相应的处理。 如果你想操作DOM树也没有必要等到onload事件来触发，通常你只需要等到该元素在DOM树中可以被访问就行。没有必要等到所有的图片都加载进来。DOMContentLoaded事件可以考虑来替代onload事件，但是它不是所有浏览器都兼容的，所以你可以用YUI的Event实现的onAvailable事件。 27.用代替@import根据前面的规则CSS文件应该放在页首来改善页面渲染。在IE中@import的行为和在页尾使用来加载效果一样，所以最好不要用@import了。 28.避免使用滤镜IE特有的AlphaImageLoader滤镜是为了解决在IE7以下正彩色PNG图片的半透明的bug。用了此滤镜会阻塞渲染，直到浏览器下载那张图片为止。这个滤镜是应用在单个元素上的，而不是单张图片上的，所以内存消耗成倍增加。最好完全不使用AlphaImageLoader滤镜，用精细加工过的PNG8代替，在IE也能用。如果你真的需要，请使用_filter来hack吧，不要影响IE7及以上的用户。 29.优化图片网页设计图出来以后，FTP传到服务器之前，仍然有些可以优化的地方。 检查GIF图片的色彩数，看是否用了调色板。用ImageMagick很方便检查：identify -verbose image.gif。当你看到了图片正在使用调色板里4色和256色时，就说明还有优化的空间。 试着将GIF转成PNG，看看有没有节省的空间。往往是没有。开发者经常犹豫是否使用PNG是因为浏览器的支持不够，但现在这些已成为历史。唯一正真的问题是真彩色PNG的alpha透明滤镜，但相比GIF也不是真彩色，不支持变化的透明。所以GIF能做到的PNG8都能做到（除了动画）。一个简单的ImageMagick命令转成安全的PNG：convert image.gif image.png。故，我们经常说：“给PNG一个机会。” 使用PNG的优化工具：pngcrush。例如：pngcrush image.png -rem alla -reduce -brute result.png。 使用JPEG的优化工具：jpegtran。这个工具对JPEG操作损耗很小，例如：旋转，优化，删除注释和其他没用的信息（EXIF信息）。命令：jpegtran -copy none -optimize -perfect src.jpg dest.jpg。 30.优化CSS Spirite水平罗列小图片比垂直方式罗列最终生成的图片要小。合并相似的颜色让你的色彩数尽量少，理想情况256色以下，适合PNG8。对无线设备“友好”，小图之间的间隔不要太大。这样对图片大小没什么影响，但用户代理把图片转成像素点阵时来说可以节省一些内存：100x100时是10K像素点，当1000x1000时是1M像素点。 31.不要在HTML中缩放图像——须权衡不要为了在HTML中设置长宽而使用比实际需要大的图片。如果你需要： 那么你的图片就应该是100×100像素而不是把一个500×500像素的图片缩小使用。 32.favicon.ico要小而且可缓存favicon.ico是位于服务器根目录下的一个图片文件。它是必定存在的，因为即使你不关心它是否有用，浏览器也会对它发出请求，因此最好不要返回一 个404 Not Found的响应。由于是在同一台服务器上，它每被请求一次coockie就会被发送一次。这个图片文件还会影响下载顺序，例如在IE中当你在 onload中请求额外的文件时，favicon会在这些额外内容被加载前下载。 因此，为了减少favicon.ico带来的弊端，要做到：文件尽量地小，最好小于1K在适当的时候（也就是你不要打算再换favicon.ico的时候，因为更换新文件时不能对它进行重命名）为它设置Expires文件头。你可以很安全地 把Expires文件头设置为未来的几个月。你可以通过核对当前favicon.ico的上次编辑时间来作出判断。Imagemagick可以帮你创建小巧的favicon。 33.保持单个内容小于25K因为iPhone不能缓存大于25K的文件。注意这里指的是解压缩后的大小。由于单纯gizp压缩可能达不要求，因此精简文件就显得十分重 要。 34.尽早输出server脚本缓冲区的内容当用户请求一个页面时，大约需要至少200ms到500ms的时间后台服务器准备好HTML页面，可能更长。在这个时间里，浏览器一直闲置等着数据返回。在PHP里，有类似flush()这样的函数，它把部分已经准备好的HTML代码先输出到浏览器。浏览器解析这部分HTML代码，并开始加载里面的组件，同时后台在准备剩下的HTML代码。这个好处在比较繁忙的后台服务器或轻量级的前端时表现比较明显。在HTML页面的HEAD以后放置flush比较好。HEAD里面一般包含了CSS和JavaScript文件，flush后可以先让浏览器并行加载这些文件，然后后台再准备剩下的内容。例如：… …Yahoo！搜索证明了用这种技术的好处。 35.打包组件成复合文本页面内容打包成复合文本就如同带有多附件的Email，它能够使你在一个HTTP请求中取得多个组件（切记：HTTP请求是很奢侈的）。当你使用这条规 则时，首先要确定用户代理是否支持（iPhone就不支持）。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>前端</tag>
        <tag>Web性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript知识树]]></title>
    <url>%2Fblogger%2F2015%2F11%2F01%2Fjavascripttree%2F</url>
    <content type="text"><![CDATA[JS的一个汇总 Javascript基础 技能 用途 参考地址 JavaScript 基础语言 free-programming-books 前端构建框架 技能 用途 参考地址 FIS 前端开发体系 Sea.js 前端加载组件 require.js 国外的前端异步加载框架 前端开发框架 技能 用途 参考地址 jQuery Dom封装框架 jQuery-plugins 基于jQuery的各类插件 bootstrap.js 前端UI框架 bootstrap plugins 基于bootstrap的各类UI插件 handlebars 前端模版框架 backbone.js 基本的前端MVC框架 backbone plugins 基于backbone的各类插件 ember.js 效率最高的前端MVVM框架 AngularJs 最流行的前端MVVM框架 工具类 技能 用途 underscore.js 函数式编程框架 underscore.string 基于underscore的string工具类 lodash 函数式编程框架 moment.js 时间日期工具类 math.js 数学计算工具类 modernizr.js html检测工具类 socket.io-client socket.io的js客户端 swfupload flash文件上传组件 jQuery-File-Upload html5文件上传组件 FileAPI html5文件上传组件 swfobject flash播放组件 UI组件 技能 用途 jQuery UI 基于jQuery的官方UI库 ztree.js 树形组件 lhgdialog.js 对话框组件 select2.js 下拉列表选择组件 noty.js 消息通知框组件 文件浏览播放组件 技能 用途 pdf.js js开发pdf浏览组件 jwplayer.js mp3/mp4播放组件 wysiwyg 所见即所得的html编辑组件 together.js 多人同时在线编辑框架]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2014总结]]></title>
    <url>%2Fblogger%2F2015%2F11%2F01%2F2014summary%2F</url>
    <content type="text"><![CDATA[志雄的2014-&gt;2015一.总结 总结可以让你更清晰地看到自己。亲爱的，别走的太快，花点时间总结下过去，规划下未来，会让你走的更稳 2014总体还是比较好的.算是在Android这一块摸到了一些门道，开始每天逛github,starupnews,startupnews,做了一些实际的项目.但是Android技术方面感觉到达了一个不上不下的状态，所以开始研究一些和应用层面联系多的。例如内存和性能方面。也开始着手做一些更难的东西。目前的话，也开始着手学习一些web方面的知识,应用开发必须成为迈过去的一道坎。 成果学习 读了吴军博士的《浪潮之巅》.读完《黑客与画家》.都是深度阅读.各种刷知乎，微博，Quora,知识面相比大一的时候提高了一个层次. 开始规划管理自己的时间，并用倒计时来警醒自己. 开始写技术博客. 在Android学习上有了不少进步。做了一些实际的项目，虽然有些只验收了第一期。 参加了软件设计大赛，幸运地抱着大腿拿了第一。项目还让一些公司的老总看上了，但是感觉都是坑，目测是拉我们进去干他们的事情。最后项目是拿去参加挑战杯了. 开始学习了一些web方面的知识,有php，js等 生活 跟同学朋友，还有工作室的人的关系越来越好了。本来以为自己情商低得不行，但是与人相处的能力还是有那么一点的 每晚都开始反思自己一天做的有什么不对的地方。 交了一哥这个湖南来的朋友，他给我讲了很多东西，也教了我很多做人的道理，当然我们也是好哥们。 不足学习 书看得还是比较少，当然看了不少博客，但是鲜有自己动手做得时候，懒，这个要改 对很多Android的东西没去理解原理就用了。 总结还是太少了,博客写的也少，总归是因为自己太渣，没多少营养品可以输出. 对学习没有大一的时候那么狂热认真了。开始有点愚蠢的骄傲。 没有了那种初学者的心态。做事情想着走捷径。 生活 开始变得越来越懒了，因为在工作室待了一年的缘故，慢慢变得老油条了 丧失了对梦想的狂热追求，不得不感叹环境对人的影响真是大。当你长期处于一种环境，会渐渐被环境里面的人潜移默化。当然我并不是说工作室里面的人懒散,我说的是大环境。这种感觉真是可怕。所以我要用时间倒计时来鞭策自己。 有时候说话不小心，很容易说错话。都是因为一直以来直来直去的原因，搞得说话不经过大脑。有好几次在待人处事上做的非常不好，英爷都是不留情面的批评我。忠言逆耳啊！换了以前的话,我肯定找理由为自己开脱。但现在不会了,也许是受身边的人影响吧. 展望20152015给了自己一些计划，由于我还是个大二狗，可能有一些实现不了，但是还是写下来吧。 买台mac(自己赚钱) 买台iphone(自己赚钱) 买台Nexus(自己赚钱) 深入学习Android的库 开始学习并做一些后端的项目 顺路学一些前端框架 开始深入学习数据结构，编译原理等计算机专业的知识,有空的话，可以搞一下算法，应用开发这一块必须成为迈过去的坎。 把更多的时间放在学习上，尽量远离QQ，微信这些毒瘤，只允许他们成为我的工具。 多写一些blog.最好是纯技术输出的文章. 多做一些个人的app或者多接一些外包(学生有外包做，很开心啦).想赚多点钱，不是因为喜欢钱，而是喜欢独立.到了这个年龄，想自己养活自己,不想受社会这个庞大的机器压迫. 找回大一时候的狂热，保持一种初学者的心态，别再忘记自己要去干什么。 增强与人交流的技巧，这个太重要了。做事难，做人更难。要学做事，更要学做人。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>年底总结</tag>
        <tag>工作</tag>
      </tags>
  </entry>
</search>
