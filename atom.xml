<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason&#39;s Note</title>
  <subtitle>note my code</subtitle>
  <link href="/blogger/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-07T16:53:40.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jason Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubantu下安装JDK</title>
    <link href="http://yoursite.com/2017/09/07/ubuntu_install_jdk/"/>
    <id>http://yoursite.com/2017/09/07/ubuntu_install_jdk/</id>
    <published>2017-09-07T15:19:56.000Z</published>
    <updated>2017-09-07T16:53:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了愉快地玩idea,决定在linux下装phpstorm跟webstorm.结果两个都要求装java环境.师兄们建议安装sunjdk,弄了一下搞定了,做下记录</p>
<h2 id="第一步-下载"><a href="#第一步-下载" class="headerlink" title="第一步:下载"></a>第一步:下载</h2><p>地址:<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a></p>
<p>然后选择同意Licese,下载tar.gz压缩包</p>
<a id="more"></a>
<h2 id="第二步-解压"><a href="#第二步-解压" class="headerlink" title="第二步:解压"></a>第二步:解压</h2><p>解压tar.gz包都是用tar zxvf命令(进入到当前目录)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo tar zxvf ./jdk-8u45-linux-x64.tar.gz</div></pre></td></tr></table></figure>
<h2 id="第三步-设置环境变量"><a href="#第三步-设置环境变量" class="headerlink" title="第三步:设置环境变量"></a>第三步:设置环境变量</h2><p>设置环境变量需要使用.bashrc这个文件<br>cd ~ 进入到根目录,ls -a 即可查看到.bashrc这个隐藏目录</p>
<p>注:修改.bashrc之前最好先备份一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp .bashrc .bash_original</div></pre></td></tr></table></figure></p>
<p>然后使用vi或者vim编辑.bashrc文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.bashrc</div></pre></td></tr></table></figure>
<p>在该文件的末尾添加以下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/home/jason/DOwnloads/jdk </div><div class="line">export CLASSPATH=$&#123;JAVA_HOME&#125;/lib:.</div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</div></pre></td></tr></table></figure>
<ul>
<li>JAVA_HOME存放的是jdk的安装目录.</li>
<li>设置CLASSPATH时候,加上当前目录(.)</li>
<li>设置PATH的时候,export PATH=${JAVA_HOME}/bin:$PATH,$PATH前的连接符号是冒号(:).win下是分号(;)</li>
</ul>
<p>为了让修改立刻生效,在终端执行以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bashrc</div></pre></td></tr></table></figure></p>
<h2 id="第四步-验证"><a href="#第四步-验证" class="headerlink" title="第四步:验证"></a>第四步:验证</h2><p>在终端输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure>
<p>看到类似下图,说明你成功了.</p>
<img src="/blogger/2017/09/07/ubuntu_install_jdk/confimjdk.png" alt="如图" title="如图">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了愉快地玩idea,决定在linux下装phpstorm跟webstorm.结果两个都要求装java环境.师兄们建议安装sunjdk,弄了一下搞定了,做下记录&lt;/p&gt;
&lt;h2 id=&quot;第一步-下载&quot;&gt;&lt;a href=&quot;#第一步-下载&quot; class=&quot;headerlink&quot; title=&quot;第一步:下载&quot;&gt;&lt;/a&gt;第一步:下载&lt;/h2&gt;&lt;p&gt;地址:&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后选择同意Licese,下载tar.gz压缩包&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/programming/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://yoursite.com/2016/11/28/singleton/"/>
    <id>http://yoursite.com/2016/11/28/singleton/</id>
    <published>2016-11-28T12:44:37.000Z</published>
    <updated>2017-09-06T13:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>特点：<br>1.单例类只有一个实例<br>2.单例类必须自己创建自己的唯一实例<br>3.必须有私有的构造方法<br>4.单例类必须给所有其他对象提供这一实例,必须有一个以自己实例为返回值的静态公有方法</p>
<h2 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Signleton();</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> singleton;</div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="懒汉单例模式"><a href="#懒汉单例模式" class="headerlink" title="懒汉单例模式"></a>懒汉单例模式</h2><p>1.普通懒汉 （多线程会失败）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</div><div class="line">            singleton = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.双重锁定检查 （DCL）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="keyword">synchronized</span> (Singleton.class)&#123;</div><div class="line">            <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</div><div class="line">                singleton = <span class="keyword">new</span> Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> singleton;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.延迟初始化占位（Holder）类模式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> LazyHolder.INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三种方式最优,一个静态内部类（占位类），在内部类中提前初始化实例，既保证了Singleton实例的延迟初始化，又保证了同步。这是一种提前初始化（饿汉式）和延迟初始化（懒汉式）的综合模式</p>
<h3 id="优缺"><a href="#优缺" class="headerlink" title="优缺"></a>优缺</h3><p>优点</p>
<ul>
<li>节省内存空间（只有一个对象）</li>
<li>避免频繁的开销</li>
<li>避免对共享资源的多重占用</li>
<li>全局访问</li>
</ul>
<p>缺点</p>
<ul>
<li>线程安全问题,饿汉式天生就是线程安全,懒汉式的话,为了线程安全的问题，才实现了以上三种方式。</li>
</ul>
<h3 id="三种懒汉模式的区别"><a href="#三种懒汉模式的区别" class="headerlink" title="三种懒汉模式的区别"></a>三种懒汉模式的区别</h3><p>1.在方法调用上加了同步关键字,虽然线程安全了，但每次都要同步，影响性能。非多线程环境下,基本99%的场景应该都不需要同步。<br>2.在getInstance中做了两次null检查,确保了只有第一次调用单例的时候才会做同步,解决了安全问题，也避免了资源消耗,但会存在指令重排序问题。<br>3.利用了classloader的机制来保证初始化instance时只有一个线程，所以也是线程安全的，同时没有性能损耗，所以一般我倾向于使用这一种。</p>
<p>参考:</p>
<p>1.<a href="http://blog.csdn.net/zhangzeyuaaa/article/details/42673245" target="_blank" rel="external">http://blog.csdn.net/zhangzeyuaaa/article/details/42673245</a><br>2.<a href="http://blog.csdn.net/jason0539/article/details/23297037/" target="_blank" rel="external">http://blog.csdn.net/jason0539/article/details/23297037/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;特点：&lt;br&gt;1.单例类只有一个实例&lt;br&gt;2.单例类必须自己创建自己的唯一实例&lt;br&gt;3.必须有私有的构造方法&lt;br&gt;4.单例类必须给所有其他对象提供这一实例,必须有一个以自己实例为返回值的静态公有方法&lt;/p&gt;
&lt;h2 id=&quot;饿汉式单例模式&quot;&gt;&lt;a href=&quot;#饿汉式单例模式&quot; class=&quot;headerlink&quot; title=&quot;饿汉式单例模式&quot;&gt;&lt;/a&gt;饿汉式单例模式&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton singleton = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Signleton();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; singleton;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/programming/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>nginx反向代理</title>
    <link href="http://yoursite.com/2016/05/16/nginxreverseproxy/"/>
    <id>http://yoursite.com/2016/05/16/nginxreverseproxy/</id>
    <published>2016-05-16T15:03:39.000Z</published>
    <updated>2017-09-16T08:00:06.000Z</updated>
    
    <content type="html"><![CDATA[<p> 今天遇到个问题:因为业务上的一些需求,我需要使用旧的asp的接口.请求旧接口的时候,有点悲剧，服务端没有做cors,也没采取jwt的方案。只能用代理把请求转发出去,才能拿到数据了</p>
<img src="/blogger/2016/05/16/nginxreverseproxy/noallow.png" alt="如图" title="如图">
<a id="more"></a>
<h2 id="正向代理和反向代理的区别"><a href="#正向代理和反向代理的区别" class="headerlink" title="正向代理和反向代理的区别"></a>正向代理和反向代理的区别</h2><blockquote>
<ul>
<li>回来的路上,一个朋友问我正向代理和反向代理的区别,结果讲不出来</li>
</ul>
</blockquote>
<p>正向代理:</p>
<p>正向代理就是平时说的代理,比如我要访问一个网站,那个网站不给我访问,但是代理服务器可以访问,我就叫代理服务器去访问那个网站,然后拿到我想要的东西。说那么多,其实就是个跳板,用过翻墙软件的人 基本可以秒懂 !</p>
<p>反向代理:</p>
<p>客户端访问一个服务器A要数据包M,事实上服务器A没有数据包M,但是服务器B有数据包M,然后服务器A去服务器B那里拿数据包M,然后再返回给客户端。这里就可以说 服务器A设置了反向代理。对于客户端来说,服务器A就是提供原始服务的服务器。</p>
<p>两者听起来好像没啥区别,区别就在于:1.正向代理,客户端需要设置一些东西,反向代理,客户端没啥好做的！2.正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。(典型例子:通过vpn访问google)。反向代理的典型用途是将 防火墙后面的服务器提供给Internet用户访问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。（典型例子:第三方的可以访问google的网站）3.正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。<br>反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。</p>
<h2 id="nginx设置"><a href="#nginx设置" class="headerlink" title="nginx设置"></a>nginx设置</h2><p> nginx安装 就不多说了 网上一大把<br> 首先需要科普一下 nginx配置文件里面的东西 看这篇文章</p>
<p> <a href="https://segmentfault.com/a/1190000002797601" target="_blank" rel="external">https://segmentfault.com/a/1190000002797601</a></p>
<p> 我这里直入操作</p>
<p> 第一步：<br> 编辑nginx的配置文件,我这里采用的是atom来进行编辑,当然因为vim比较蛋疼 我比较懒的缘故,基本上把proxy_pass跟主机名还有响应头设置好就可以了</p>
 <img src="/blogger/2016/05/16/nginxreverseproxy/nginxconf.png" alt="如图" title="如图">
<p> 第二步：<br> 编辑host文件</p>
 <img src="/blogger/2016/05/16/nginxreverseproxy/host.png" alt="如图" title="如图">
<p> 这样的话 访问流程就是</p>
<p>  localhost:3000 -&gt; request -&gt; (proxy: apitest.com) -&gt; proxypass -&gt; (dist: www.xxxx.com) </p>
<p>  第三步：<br>  客户端写个ajax去试验一下</p>
  <img src="/blogger/2016/05/16/nginxreverseproxy/ajax.png" alt="如图" title="如图">
<p>  200成功拿到数据！这样就不用搞cors或者jwt了,服务端在同域的设置下,你也可以这样子来做开发,最后改下主机名,然后把代码扔进去就可以了。</p>
<p>  写的不好,有任何问题可以联系我。欢迎打脸,多学习交流！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 今天遇到个问题:因为业务上的一些需求,我需要使用旧的asp的接口.请求旧接口的时候,有点悲剧，服务端没有做cors,也没采取jwt的方案。只能用代理把请求转发出去,才能拿到数据了&lt;/p&gt;
&lt;img src=&quot;/blogger/2016/05/16/nginxreverseproxy/noallow.png&quot; alt=&quot;如图&quot; title=&quot;如图&quot;&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/programming/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="反向代理" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>迁移你的eclipse项目到IntellJIDEA</title>
    <link href="http://yoursite.com/2016/03/22/eclipse2Ij/"/>
    <id>http://yoursite.com/2016/03/22/eclipse2Ij/</id>
    <published>2016-03-22T13:35:55.000Z</published>
    <updated>2017-09-16T06:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>图片居多,跟着图来做即可</p>
<h3 id="step1"><a href="#step1" class="headerlink" title="step1."></a>step1.</h3><p> 打开IJ,选择导入你的eclipse项目,跟着下面三幅图操作吧！</p>
<img src="/blogger/2016/03/22/eclipse2Ij/1.png" alt="如图" title="如图">
 <a id="more"></a>
<img src="/blogger/2016/03/22/eclipse2Ij/2.png" alt="如图" title="如图">
<img src="/blogger/2016/03/22/eclipse2Ij/3.png" alt="如图" title="如图">
<h3 id="step2"><a href="#step2" class="headerlink" title="step2."></a>step2.</h3><p>导入之后 肯定报一大堆错误,其实只要重新调整一下项目的结构即可</p>
<ol>
<li>project那个项 基本不需要看 大概知道每个啥意思就可以了2. </li>
<li>选择module模块,点击+号,把项目加载进来，注意选择成web工程！</li>
<li>点击你的项目,添加一个ApplicationServerlibrary,因为后面要使用tomcat,所以要在这里加入对应的library</li>
<li>加入tomcat之后呢,点击web,选择成为web工程之后,肯定要配置一下对应的东西不是?</li>
</ol>
<img src="/blogger/2016/03/22/eclipse2Ij/4.png" alt="如图" title="如图">
<ol>
<li>右上部分选择的是web.xml的配置文件的路径</li>
<li>右下部分选的是的webContent的目录</li>
</ol>
<img src="/blogger/2016/03/22/eclipse2Ij/5.png" alt="如图" title="如图">
<h3 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h3><p>把工程目录建立好之后,下一步就是引jar了,点+号你的项目对应的放jar的目录即可</p>
<img src="/blogger/2016/03/22/eclipse2Ij/6.png" alt="如图" title="如图">
<h3 id="step4"><a href="#step4" class="headerlink" title="step4"></a>step4</h3><p>接下来建立一个Facets</p>
<p>基本上跟module的web部分的配置一样<br>右上是web.xml,右下是WebContent的目录,配置好这两步的时候右下角会有警告,就是要我们去弄Artifacts</p>
<img src="/blogger/2016/03/22/eclipse2Ij/7.png" alt="如图" title="如图">
<h3 id="step5"><a href="#step5" class="headerlink" title="step5"></a>step5</h3><p> artifacets翻译过来是工件,个人愚见,应该是指工程里面某个阶段的产物!在这里！讲的那么高大上,其实就是要你配置一下打包输出的目录即可</p>
<img src="/blogger/2016/03/22/eclipse2Ij/8.png" alt="如图" title="如图">
<img src="/blogger/2016/03/22/eclipse2Ij/9.png" alt="如图" title="如图">
<h3 id="step6"><a href="#step6" class="headerlink" title="step6"></a>step6</h3><p>接下来是tomcat的配置,看图应该都懂的了,最后点击三角形跑起来</p>
<img src="/blogger/2016/03/22/eclipse2Ij/10.png" alt="如图" title="如图">
<img src="/blogger/2016/03/22/eclipse2Ij/11.png" alt="如图" title="如图">
<p>恭喜恭喜</p>
<img src="/blogger/2016/03/22/eclipse2Ij/12.png" alt="如图" title="如图">
<p>结语:<br>   时间仓促,写的不好,有任何问题都可以联系我!</p>
<p><a href="http://weibo.com/3758959647/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo" target="_blank" rel="external">微博</a></p>
<p>email:lizhixiong498056754@gmail.com</p>
<p><a href="https://github.com/jacsonLee" target="_blank" rel="external">Github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图片居多,跟着图来做即可&lt;/p&gt;
&lt;h3 id=&quot;step1&quot;&gt;&lt;a href=&quot;#step1&quot; class=&quot;headerlink&quot; title=&quot;step1.&quot;&gt;&lt;/a&gt;step1.&lt;/h3&gt;&lt;p&gt; 打开IJ,选择导入你的eclipse项目,跟着下面三幅图操作吧！&lt;/p&gt;
&lt;img src=&quot;/blogger/2016/03/22/eclipse2Ij/1.png&quot; alt=&quot;如图&quot; title=&quot;如图&quot;&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/programming/"/>
    
    
      <category term="eclipse" scheme="http://yoursite.com/tags/eclipse/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="IntellJIDEA" scheme="http://yoursite.com/tags/IntellJIDEA/"/>
    
  </entry>
  
  <entry>
    <title>web前端页面速度优化的多条建议</title>
    <link href="http://yoursite.com/2015/11/01/webPerformance/"/>
    <id>http://yoursite.com/2015/11/01/webPerformance/</id>
    <published>2015-11-01T09:21:50.000Z</published>
    <updated>2017-09-16T07:52:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Web性能优化这个词既可以解读成页面加载速度（Page Speed）的优化，也可以解读成页面渲染性能（Page Performance）的优化。或者是二者的集合。</p>
<h3 id="1-合并静态资源-进来减少HTTP请求个数"><a href="#1-合并静态资源-进来减少HTTP请求个数" class="headerlink" title="1.合并静态资源,进来减少HTTP请求个数"></a>1.合并静态资源,进来减少HTTP请求个数</h3><p>包括CSS、JavaScript和小图片，减少HTTP请求.但是又要合适考虑合并之后的文件体积,具体合并与否需要看场景</p>
<img src="/blogger/2015/11/01/webPerformance/mergestaticRes.jpg" alt="如图" title="如图">
 <a id="more"></a>
<h3 id="2-使用CDN"><a href="#2-使用CDN" class="headerlink" title="2.使用CDN"></a>2.使用CDN</h3><p>或者一些公共库使用第三方提供的静态资源地址(比如Jquery,normalize.css).一方面增加并发下载量,另一方面能够和其他网站共享缓存.</p>
<img src="/blogger/2015/11/01/webPerformance/cdn.jpg" alt="如图" title="如图">
<h3 id="3-添加Expire-Cache-Control头"><a href="#3-添加Expire-Cache-Control头" class="headerlink" title="3.添加Expire/Cache-Control头"></a>3.添加Expire/Cache-Control头</h3><p>Expire:expire的内容是一个时间值,值就是资源在本地的过期时间,存在本地,在本地缓存阶段,找到一个对应的资源值.如果当前时间还没有超过资源的过期时间,就直接使用哪个这一本地资源,不会发送http请求.<br>Cache-Control:顾名思义，这个是负责页面缓存机制的头,如果该头部指示缓存,缓存的内容也会存在本地.但相比Expire,Cache-Control有更多的选项,也有更多的处理方式</p>
<img src="/blogger/2015/11/01/webPerformance/expire.jpg" alt="如图" title="如图">
<h3 id="4-开启服务器端的Gzip压缩"><a href="#4-开启服务器端的Gzip压缩" class="headerlink" title="4.开启服务器端的Gzip压缩"></a>4.开启服务器端的Gzip压缩</h3><p>这对文本资源非常有效,对图片资源则没有那么大的压缩比例.</p>
<img src="/blogger/2015/11/01/webPerformance/compress.jpg" alt="如图" title="如图">
<h3 id="5-把CSS放到页面头部-把Javascript放在页面底部"><a href="#5-把CSS放到页面头部-把Javascript放在页面底部" class="headerlink" title="5.把CSS放到页面头部,把Javascript放在页面底部"></a>5.把CSS放到页面头部,把Javascript放在页面底部</h3><p>因为浏览器先解析html+css,把结构给显示出来,如果先执行javascript脚本,则会阻塞页面渲染,让页面出现长时间的空白</p>
<h3 id="6-避免在CSS中使用Expressions"><a href="#6-避免在CSS中使用Expressions" class="headerlink" title="6.避免在CSS中使用Expressions"></a>6.避免在CSS中使用Expressions</h3><p>简单举个CSS表达式的例子:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">	var i = 0;</div><div class="line">	function scare()&#123;</div><div class="line">		i++;</div><div class="line">		document.getElementById(&apos;run&apos;).value = i;</div><div class="line">		return;</div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">ul a &#123;witdh:expression(this.offsetWidth &gt; 750 ? scare() : scare());&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;body&gt;</div><div class="line">当鼠标移动时,cssExpression计算了&lt;input id=&quot;run&quot;&gt;次</div><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;aaa&lt;/li&gt;</div><div class="line">  &lt;li&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;bbb&lt;/li&gt;</div><div class="line">  &lt;li&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;ccc&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;html&gt;</div></pre></td></tr></table></figure>
<img src="/blogger/2015/11/01/webPerformance/runNumber.jpg" alt="如图" title="如图">
<h3 id="7-避免空的src和href"><a href="#7-避免空的src和href" class="headerlink" title="7.避免空的src和href"></a>7.避免空的src和href</h3><p>留意具有这两个属性的标签如link，script，img，iframe等；src被javascript动态赋值的时候,会发多一个http请求,href标签也是同理。</p>
<h3 id="8-将CSS和JS放到外部文件"><a href="#8-将CSS和JS放到外部文件" class="headerlink" title="8.将CSS和JS放到外部文件"></a>8.将CSS和JS放到外部文件</h3><p>如果部分css跟js只在一个页面出现,则可以考虑css内联。重用的css跟javascript则单独放置于外部.</p>
<h3 id="9-减少DNS查询"><a href="#9-减少DNS查询" class="headerlink" title="9.减少DNS查询"></a>9.减少DNS查询</h3><p>当你输入www.baidu.com到你的浏览器时，一个连接到你的浏览器的DNS解析器返回该服务器的IP地址.DNS查询是有代价的。通常，需要20-120毫秒查找特定主机名的IP地址。在DNS查询完成前，浏览器无法从该主机下载任何东西。为了更好的性能表现，DNS查询是被缓存的。在一个特殊的缓存服务器上可以缓存这些信息，它由用户的ISP或局域网设备维护，同时用户的计算机也由缓存。DNS信息仍保留在操作系统的DNS缓存中（。大多数浏览器都有自己的缓存，它们独立于操作系统的缓存。只要浏览器在自己的缓存中有了DNS记录，它不会为每个请求都访问操作系统中的记录.当客户端的DNS缓存是空的（包括浏览器和操作系统），DNS查询数目等于网页中独立的主机名数量。这包括在网页的网址，图片，脚本，样式，Flash等等的URL中。减少独立的主机名数量就减少了DNS查询次数.减少了独特的主机名有可能减少该网页中并行下载的能力。避免DNS查询减少了响应时间，但是减少并行下载能力可能会增加响应时间。我的准则就是这些组件至少两个主机名，但不超过4个。这样做就可以很好的折衷减少DNS查询，并有高度的并行下载能力.<br><img src="/blogger/2015/11/01/webPerformance/DNSSearch.jpg" alt="如图" title="如图"><br>浏览器缓存时间<br><img src="/blogger/2015/11/01/webPerformance/browserCache.jpg" alt="如图" title="如图"><br>缓存时间长：减少DNS重复查找,节省时间<br>缓存时间短：及时检测服务器的变化,保证正确性</p>
<p>所以可以根据网站性质的不同 做不同的处理,确定用几个域名来处理自己的网站是最合适的</p>
<img src="/blogger/2015/11/01/webPerformance/areadiff.jpg" alt="如图" title="如图">
<h3 id="10-压缩源码和图片"><a href="#10-压缩源码和图片" class="headerlink" title="10.压缩源码和图片"></a>10.压缩源码和图片</h3><p>JavaScript文件源代码可以采用混淆压缩的方式，CSS文件源代码进行普通压缩，JPG图片可以根据具体质量来压缩为50%到70%，PNG可以使用一些开源压缩软件来压缩，比如24色变成8色、去掉一些PNG格式信息等.可以考虑压缩工具JSMin和YUICompressor</p>
<h3 id="11-避免跳转-重定向"><a href="#11-避免跳转-重定向" class="headerlink" title="11.避免跳转,重定向"></a>11.避免跳转,重定向</h3><p>重定向一般使用301或302状态码完成.来看一个http头中的301响应的重定向：<br>HTTP/1.1 301 Moved Permanently<br>Location: <a href="http://example.com/newuri" target="_blank" rel="external">http://example.com/newuri</a><br>Content-Type: text/html<br>浏览器会自动将用户重定向到Location字段中指定的网址。所有必要的信息都在头信息中。响应体通常是空的。301、302响应是在实际中是不缓存的，除非特地用Expires或Cache-Control表明。HTML的Meta Refresh标签或用JavaScript也可以将用户定向到不同的网址，但如果你必须做重定向，首选的方法是使用标准的3xx HTTP状态码，主要是为了确保浏览器后退按钮的正常工作.<br>其中最浪费的重定向频繁地发生和Web开发人员通常都不知道这件事。它发生在结尾缺少斜线“/”的URL，结尾应该有“/”。例如，要访问<a href="http://astrology.yahoo.com/astrology，结果一个301响应重定向到了http://astrology.yahoo.com/astrology/（注意“/”）。" target="_blank" rel="external">http://astrology.yahoo.com/astrology，结果一个301响应重定向到了http://astrology.yahoo.com/astrology/（注意“/”）。</a><br>如果你使用的是Apache，在其中使用Alias或mod_rewrite或DirectorySlash指令修复了这个问题。如果两个代码路径托管在同一台服务器上，替代方式是使用Alias和mod_rewrite。如果一个域名变化的原因需要使用重定向，替代方式是创建CNAME（一个DNS记录，创造了一个指向另一个网域名称的别名），结合使用Alias或mod_rewrite 。</p>
<h3 id="12-剔除重复的JS和css"><a href="#12-剔除重复的JS和css" class="headerlink" title="12.剔除重复的JS和css"></a>12.剔除重复的JS和css</h3><p>重复调用脚本,一方面增加额外的http请求,另一方面还会造成多次运算.IE和Firefox不管脚本是否缓存,都会重复计算javascript.</p>
<h3 id="13-配置ETags"><a href="#13-配置ETags" class="headerlink" title="13.配置ETags"></a>13.配置ETags</h3><p>Entity tags(ETags)(实体标签)是web服务器和浏览器用于判断浏览器缓存中的内容和服务器中的原始内容是否匹配的一种机制(“实体”就是所说的”内容”,包括图片,脚本,样式等),是比last-modified date更灵活的机制,单位时间内文件被修过多次,ETag可以综合Inode(文件的索引节点(inode)数),MTime(修改时间)和Size来精准进行判断,避免UNIX记录MTime只能精确到秒的问题.服务器集群是使用,可取后两个参数。使用ETags减少web应用带宽和负载.<br>例如:<br>HTTP/1.1 200 OK<br>Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT<br>ETag: “10c24bc-4ab-457e1c1f”<br>Content-Length: 12195</p>
<p>如果浏览器要验证该组件,它就使用If-None-Match头把接收到得ETag信息发送回原始服务器.如果ETag匹配上了,服务器就直接返回304状态码以节省开销,例如:<br>GET /i/yahoo.gif HTTP/1.1<br>Host: us.yimg.com<br>If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT<br>If-None-Match: “10c24bc-4ab-457e1c1f” </p>
<p>HTTP/1.1 304 Not Modified</p>
<h3 id="14-选择合适的图片格式"><a href="#14-选择合适的图片格式" class="headerlink" title="14.选择合适的图片格式"></a>14.选择合适的图片格式</h3><p>如果图片颜色数较多就使用JPG格式，如果图片颜色数较少就使用PNG格式，如果能够通过服务器端判断浏览器支持WebP，那么就使用WebP格式和SVG格式.</p>
<h3 id="15-使用AJAX可缓存"><a href="#15-使用AJAX可缓存" class="headerlink" title="15.使用AJAX可缓存"></a>15.使用AJAX可缓存</h3><p>利用时间戳,更精巧的实现响应可缓存与服务器数据同步更新</p>
<h3 id="16-使用GET来完成AJAX请求"><a href="#16-使用GET来完成AJAX请求" class="headerlink" title="16.使用GET来完成AJAX请求"></a>16.使用GET来完成AJAX请求</h3><p>当使用XMLHttpRequest时,浏览器中的POST方法是一个“两步走”的过程:首先发送文件头,然后才发送数据.在url小于2K时使用GET获取数据。</p>
<img src="/blogger/2015/11/01/webPerformance/getajax.jpg" alt="如图" title="如图">
<h3 id="17-组件延迟加载"><a href="#17-组件延迟加载" class="headerlink" title="17.组件延迟加载"></a>17.组件延迟加载</h3><p>哪些是渲染这个页面必需的。剩下的内容都可以等到后来加载.<br>JavaScript可以非常理想地根据需要切分成onload事件之前部分和之后部分。例如：你有JavaScript代码和库来实现拖拽和动画功能，这些都能后加载，因为拖拽是在页面初始化渲染之后。其他如隐藏的内容（用户动作触发才显示）和展开折叠才显示的图片等<br>ex:YUI Image Loader让你能延时加载折叠下面的图片,YUIGet能在运行时加载JS和CSS文件,用firebug的网络面板查看Yahoo！Yahoo的首页加载过程,就是一个很好的例子</p>
<h3 id="18-组件预加载"><a href="#18-组件预加载" class="headerlink" title="18.组件预加载"></a>18.组件预加载</h3><p>预加载（preload）看上去和后加载（post-load）相反，但是实际上它们的目的完全不同。预加载组件是浏览器空闲时请求组件（例如：图片，样式和脚本），这些资源你可能在未来会用到。用这种方法，当你访问下一个页面时会发现需要的大部分资源已经在浏览器的cache里面了，页面的加载速度就会很快。<br>预加载的几种方式:<br>1.无条件预加载<br>ex:google.com是在onload事件里面预加载一个sprite图片.sprite图片在google.com首页中没有用到,但是在后面的搜索结果中就用到了</p>
<p>2.条件预加载<br>基于用户动作,做出推测,预测用户下一个要去的页面,进行相应的预加载.在search.yahoo.com你能看到当你开始在输入框中输入时一些预加载额外资源的请求.</p>
<p>3.预测预加载<br>通常在改版前进行的预加载。ex:新站点很酷,但是比以前慢了。部分原因可能是用户访问你老站点时带着cache,而访问你的新站点时,cache是空的.你可以在改版上线前用该方法减少这种负面的影响:老站点页面在浏览器空闲时加载一些在新站点会用到的资源文件</p>
<h3 id="19-减少DOM访问"><a href="#19-减少DOM访问" class="headerlink" title="19.减少DOM访问"></a>19.减少DOM访问</h3><p>用javascript访问DOM元素非常慢,为了有一个相应更快的页面,你应该:</p>
<ul>
<li>把访问过的元素对象做cache</li>
<li>以”离线”方式更新节点,然后添加到DOM树里</li>
<li>避免使用Javascript来fix布局问题</li>
</ul>
<h3 id="20-根据域名划分页面内容"><a href="#20-根据域名划分页面内容" class="headerlink" title="20.根据域名划分页面内容"></a>20.根据域名划分页面内容</h3><p>拆分组件分布的域名可以增加并行加载能力。但是,务必不要多于4个域名,那样会带来更多的DNS查询而浪费资源的后果.ex:你的html和你的动态内容在www.example.org上,将静态的组件拆分到static1.example.org和static2.example.org上</p>
<h3 id="21-尽量减少iframe的个数"><a href="#21-尽量减少iframe的个数" class="headerlink" title="21.尽量减少iframe的个数"></a>21.尽量减少iframe的个数</h3><p>iframe允许在父文档里面插入一个html文档。<br>iframe优点</p>
<ul>
<li>对速度比较慢得第三方内容有帮助.比如:广告,徽章</li>
<li>安全沙箱</li>
<li>内外脚本并行下载</li>
</ul>
<p>iframe缺点</p>
<ul>
<li>即使iframe是空的,消耗的资源也是比较多的</li>
<li>阻塞了页面的onload事件</li>
<li>非语义化</li>
</ul>
<h3 id="22-避免404"><a href="#22-避免404" class="headerlink" title="22.避免404"></a>22.避免404</h3><p>HTTP请求时间消耗是很大的，有些站点把404错误响应页面改为“你是不是要找<em>*</em>”，这虽然改进了用户体验但是同样也会浪费服务器资源（如数据库等）。最糟糕的情况是指向外部 JavaScript的链接出现问题并返回404代码。首先，这种加载会破坏并行加载；其次浏览器会把试图在返回的404响应内容中找到可能有用的部分当作JavaScript代码来执行。</p>
<h3 id="23-减少Cookie的大小"><a href="#23-减少Cookie的大小" class="headerlink" title="23.减少Cookie的大小"></a>23.减少Cookie的大小</h3><p>因为很多理由需要使用cookie，例如：认证，个性化等。cookie在HTTP头信息，是服务器和浏览器之间的信息交互。为了最大程度地降低对用户响应时间的影响，需要让cookie的大小尽量最小化。</p>
<p>总结:</p>
<ul>
<li>取消没有必要的cookie</li>
<li>cookie尽量小,对响应时间影响尽量少</li>
<li>设置cookie时要设置到合适的子域下,这样才不影响其他子域</li>
<li>设置合理的过期时间。让cookie早点过去或者不设置时间(session cookie)可以改善响应时间 </li>
</ul>
<h3 id="24-使用无cookie的域"><a href="#24-使用无cookie的域" class="headerlink" title="24.使用无cookie的域"></a>24.使用无cookie的域</h3><p>浏览器请求一个静态的图片时也会发送cookie数据，然而服务器可能根本就不用这些cookie，那它们只会浪费网络带宽，没有理由被发送。务必将静态的组件放在cookie-free的域名下面。你可以创建一个子域名来放置你所有的静态组件.</p>
<p>如果你的web域名时www.example.org，你的静态组件可以域名是static.example.org。尽管如此，如果你在顶级域名example.org上而不是在www.example.org上设置了cookie的话，在请求static.example.org上的静态组件时cookie仍然会被发送过去。针对上面的例子，你应该重新买个（顶级）域名。Yahoo！使用yimg.com，YouTube使用ytimg.com，Amazon使用images-amazon.com等等。</p>
<p>使用cookie-free的域名还有一个好处：有些代理服务器会拒绝为有cookie数据提交的请求使用cache技术，cookie-free就可以使用cache。</p>
<h3 id="25-减少DOM元素个数"><a href="#25-减少DOM元素个数" class="headerlink" title="25.减少DOM元素个数"></a>25.减少DOM元素个数</h3><p>使用更适合或者在语意是更贴切的标签，要考虑大量DOM元素中循环的性能开销。</p>
<h3 id="26-开发智能事件处理程序"><a href="#26-开发智能事件处理程序" class="headerlink" title="26.开发智能事件处理程序"></a>26.开发智能事件处理程序</h3><p>有时候感觉页面对动作的响应比较慢，很有可能是因为在DOM树不同的元素上添加的事件处理太多了，它们被执行的太频繁了。这样的情况下用事件代表团的方式出来比较好。例如：有10个按钮在一个div中，只需要给div上添加一个事件处理函数，包装一下避免给10个按钮都加上事件处理函数了。事件冒泡上来，处理函数捕获到，并能分析出来源自哪个按钮，做相应的处理。</p>
<p>如果你想操作DOM树也没有必要等到onload事件来触发，通常你只需要等到该元素在DOM树中可以被访问就行。没有必要等到所有的图片都加载进来。DOMContentLoaded事件可以考虑来替代onload事件，但是它不是所有浏览器都兼容的，所以你可以用YUI的Event实现的onAvailable事件。</p>
<h3 id="27-用代替-import"><a href="#27-用代替-import" class="headerlink" title="27.用代替@import"></a>27.用<link>代替@import</h3><p>根据前面的规则CSS文件应该放在页首来改善页面渲染。在IE中@import的行为和在页尾使用来加载效果一样，所以最好不要用@import了。</p>
<h3 id="28-避免使用滤镜"><a href="#28-避免使用滤镜" class="headerlink" title="28.避免使用滤镜"></a>28.避免使用滤镜</h3><p>IE特有的AlphaImageLoader滤镜是为了解决在IE7以下正彩色PNG图片的半透明的bug。用了此滤镜会阻塞渲染，直到浏览器下载那张图片为止。这个滤镜是应用在单个元素上的，而不是单张图片上的，所以内存消耗成倍增加。<br>最好完全不使用AlphaImageLoader滤镜，用精细加工过的PNG8代替，在IE也能用。如果你真的需要，请使用_filter来hack吧，不要影响IE7及以上的用户。</p>
<h3 id="29-优化图片"><a href="#29-优化图片" class="headerlink" title="29.优化图片"></a>29.优化图片</h3><p>网页设计图出来以后，FTP传到服务器之前，仍然有些可以优化的地方。</p>
<p>检查GIF图片的色彩数，看是否用了调色板。用ImageMagick很方便检查：identify -verbose image.gif。当你看到了图片正在使用调色板里4色和256色时，就说明还有优化的空间。</p>
<p>试着将GIF转成PNG，看看有没有节省的空间。往往是没有。开发者经常犹豫是否使用PNG是因为浏览器的支持不够，但现在这些已成为历史。唯一正真的问题是真彩色PNG的alpha透明滤镜，但相比GIF也不是真彩色，不支持变化的透明。所以GIF能做到的PNG8都能做到（除了动画）。一个简单的ImageMagick命令转成安全的PNG：convert image.gif image.png。故，我们经常说：“给PNG一个机会。”</p>
<p>使用PNG的优化工具：pngcrush。例如：pngcrush image.png -rem alla -reduce -brute result.png。</p>
<p>使用JPEG的优化工具：jpegtran。这个工具对JPEG操作损耗很小，例如：旋转，优化，删除注释和其他没用的信息（EXIF信息）。命令：jpegtran -copy none -optimize -perfect src.jpg dest.jpg。</p>
<h3 id="30-优化CSS-Spirite"><a href="#30-优化CSS-Spirite" class="headerlink" title="30.优化CSS Spirite"></a>30.优化CSS Spirite</h3><p>水平罗列小图片比垂直方式罗列最终生成的图片要小。<br>合并相似的颜色让你的色彩数尽量少，理想情况256色以下，适合PNG8。<br>对无线设备“友好”，小图之间的间隔不要太大。这样对图片大小没什么影响，但用户代理把图片转成像素点阵时来说可以节省一些内存：100x100时是10K像素点，当1000x1000时是1M像素点。</p>
<h3 id="31-不要在HTML中缩放图像——须权衡"><a href="#31-不要在HTML中缩放图像——须权衡" class="headerlink" title="31.不要在HTML中缩放图像——须权衡"></a>31.不要在HTML中缩放图像——须权衡</h3><p>不要为了在HTML中设置长宽而使用比实际需要大的图片。如果你需要：</p>
<p>那么你的图片就应该是100×100像素而不是把一个500×500像素的图片缩小使用。</p>
<h3 id="32-favicon-ico要小而且可缓存"><a href="#32-favicon-ico要小而且可缓存" class="headerlink" title="32.favicon.ico要小而且可缓存"></a>32.favicon.ico要小而且可缓存</h3><p>favicon.ico是位于服务器根目录下的一个图片文件。它是必定存在的，因为即使你不关心它是否有用，浏览器也会对它发出请求，因此最好不要返回一 个404 Not Found的响应。由于是在同一台服务器上，它每被请求一次coockie就会被发送一次。这个图片文件还会影响下载顺序，例如在IE中当你在 onload中请求额外的文件时，favicon会在这些额外内容被加载前下载。</p>
<p>因此，为了减少favicon.ico带来的弊端，要做到：<br>文件尽量地小，最好小于1K<br>在适当的时候（也就是你不要打算再换favicon.ico的时候，因为更换新文件时不能对它进行重命名）为它设置Expires文件头。你可以很安全地 把Expires文件头设置为未来的几个月。你可以通过核对当前favicon.ico的上次编辑时间来作出判断。<br>Imagemagick可以帮你创建小巧的favicon。</p>
<h3 id="33-保持单个内容小于25K"><a href="#33-保持单个内容小于25K" class="headerlink" title="33.保持单个内容小于25K"></a>33.保持单个内容小于25K</h3><p>因为iPhone不能缓存大于25K的文件。注意这里指的是解压缩后的大小。由于单纯gizp压缩可能达不要求，因此精简文件就显得十分重 要。</p>
<h3 id="34-尽早输出server脚本缓冲区的内容"><a href="#34-尽早输出server脚本缓冲区的内容" class="headerlink" title="34.尽早输出server脚本缓冲区的内容"></a>34.尽早输出server脚本缓冲区的内容</h3><p>当用户请求一个页面时，大约需要至少200ms到500ms的时间后台服务器准备好HTML页面，可能更长。在这个时间里，浏览器一直闲置等着数据返回。在PHP里，有类似flush()这样的函数，它把部分已经准备好的HTML代码先输出到浏览器。浏览器解析这部分HTML代码，并开始加载里面的组件，同时后台在准备剩下的HTML代码。这个好处在比较繁忙的后台服务器或轻量级的前端时表现比较明显。<br>在HTML页面的HEAD以后放置flush比较好。HEAD里面一般包含了CSS和JavaScript文件，flush后可以先让浏览器并行加载这些文件，然后后台再准备剩下的内容。<br>例如：… …<br>Yahoo！搜索证明了用这种技术的好处。</p>
<h3 id="35-打包组件成复合文本"><a href="#35-打包组件成复合文本" class="headerlink" title="35.打包组件成复合文本"></a>35.打包组件成复合文本</h3><p>页面内容打包成复合文本就如同带有多附件的Email，它能够使你在一个HTTP请求中取得多个组件（切记：HTTP请求是很奢侈的）。当你使用这条规 则时，首先要确定用户代理是否支持（iPhone就不支持）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web性能优化这个词既可以解读成页面加载速度（Page Speed）的优化，也可以解读成页面渲染性能（Page Performance）的优化。或者是二者的集合。&lt;/p&gt;
&lt;h3 id=&quot;1-合并静态资源-进来减少HTTP请求个数&quot;&gt;&lt;a href=&quot;#1-合并静态资源-进来减少HTTP请求个数&quot; class=&quot;headerlink&quot; title=&quot;1.合并静态资源,进来减少HTTP请求个数&quot;&gt;&lt;/a&gt;1.合并静态资源,进来减少HTTP请求个数&lt;/h3&gt;&lt;p&gt;包括CSS、JavaScript和小图片，减少HTTP请求.但是又要合适考虑合并之后的文件体积,具体合并与否需要看场景&lt;/p&gt;
&lt;img src=&quot;/blogger/2015/11/01/webPerformance/mergestaticRes.jpg&quot; alt=&quot;如图&quot; title=&quot;如图&quot;&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/programming/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Web性能优化" scheme="http://yoursite.com/tags/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Javascript知识树</title>
    <link href="http://yoursite.com/2015/11/01/javascripttree/"/>
    <id>http://yoursite.com/2015/11/01/javascripttree/</id>
    <published>2015-11-01T09:17:11.000Z</published>
    <updated>2017-09-16T07:07:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>JS的一个汇总</li>
</ul>
</blockquote>
<h2 id="Javascript基础"><a href="#Javascript基础" class="headerlink" title="Javascript基础"></a>Javascript基础</h2><table>
<thead>
<tr>
<th>技能</th>
<th>用途</th>
<th>参考地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>JavaScript</td>
<td>基础语言</td>
<td>free-programming-books</td>
</tr>
</tbody>
</table>
 <a id="more"></a>
<h2 id="前端构建框架"><a href="#前端构建框架" class="headerlink" title="前端构建框架"></a>前端构建框架</h2><table>
<thead>
<tr>
<th>技能</th>
<th>用途</th>
<th>参考地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>FIS</td>
<td>前端开发体系</td>
<td></td>
</tr>
<tr>
<td>Sea.js</td>
<td>前端加载组件</td>
<td></td>
</tr>
<tr>
<td>require.js</td>
<td>国外的前端异步加载框架</td>
</tr>
</tbody>
</table>
<h2 id="前端开发框架"><a href="#前端开发框架" class="headerlink" title="前端开发框架"></a>前端开发框架</h2><table>
<thead>
<tr>
<th>技能</th>
<th>用途</th>
<th>参考地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>jQuery</td>
<td>Dom封装框架</td>
<td></td>
</tr>
<tr>
<td>jQuery-plugins</td>
<td>基于jQuery的各类插件</td>
<td></td>
</tr>
<tr>
<td>bootstrap.js</td>
<td>前端UI框架</td>
<td></td>
</tr>
<tr>
<td>bootstrap plugins</td>
<td>基于bootstrap的各类UI插件</td>
<td></td>
</tr>
<tr>
<td>handlebars</td>
<td>前端模版框架</td>
<td></td>
</tr>
<tr>
<td>backbone.js</td>
<td>基本的前端MVC框架</td>
<td></td>
</tr>
<tr>
<td>backbone plugins</td>
<td>基于backbone的各类插件</td>
<td></td>
</tr>
<tr>
<td>ember.js</td>
<td>效率最高的前端MVVM框架</td>
<td></td>
</tr>
<tr>
<td>AngularJs</td>
<td>最流行的前端MVVM框架</td>
</tr>
</tbody>
</table>
<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><table>
<thead>
<tr>
<th>技能</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>underscore.js</td>
<td>函数式编程框架</td>
</tr>
<tr>
<td>underscore.string</td>
<td>基于underscore的string工具类</td>
</tr>
<tr>
<td>lodash</td>
<td>函数式编程框架</td>
</tr>
<tr>
<td>moment.js</td>
<td>时间日期工具类</td>
</tr>
<tr>
<td>math.js</td>
<td>数学计算工具类</td>
</tr>
<tr>
<td>modernizr.js</td>
<td>html检测工具类</td>
</tr>
<tr>
<td>socket.io-client</td>
<td>socket.io的js客户端</td>
</tr>
<tr>
<td>swfupload</td>
<td>flash文件上传组件</td>
</tr>
<tr>
<td>jQuery-File-Upload</td>
<td>html5文件上传组件</td>
</tr>
<tr>
<td>FileAPI</td>
<td>html5文件上传组件</td>
</tr>
<tr>
<td>swfobject</td>
<td>flash播放组件</td>
</tr>
</tbody>
</table>
<h2 id="UI组件"><a href="#UI组件" class="headerlink" title="UI组件"></a>UI组件</h2><table>
<thead>
<tr>
<th>技能</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>jQuery UI</td>
<td>基于jQuery的官方UI库</td>
</tr>
<tr>
<td>ztree.js</td>
<td>树形组件</td>
</tr>
<tr>
<td>lhgdialog.js</td>
<td>对话框组件</td>
</tr>
<tr>
<td>select2.js</td>
<td>下拉列表选择组件</td>
</tr>
<tr>
<td>noty.js</td>
<td>消息通知框组件</td>
</tr>
</tbody>
</table>
<h2 id="文件浏览播放组件"><a href="#文件浏览播放组件" class="headerlink" title="文件浏览播放组件"></a>文件浏览播放组件</h2><table>
<thead>
<tr>
<th>技能</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>pdf.js</td>
<td>js开发pdf浏览组件</td>
</tr>
<tr>
<td>jwplayer.js</td>
<td>mp3/mp4播放组件</td>
</tr>
<tr>
<td>wysiwyg</td>
<td>所见即所得的html编辑组件</td>
</tr>
<tr>
<td>together.js</td>
<td>多人同时在线编辑框架</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;JS的一个汇总&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Javascript基础&quot;&gt;&lt;a href=&quot;#Javascript基础&quot; class=&quot;headerlink&quot; title=&quot;Javascript基础&quot;&gt;&lt;/a&gt;Javascript基础&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;技能&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;参考地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;JavaScript&lt;/td&gt;
&lt;td&gt;基础语言&lt;/td&gt;
&lt;td&gt;free-programming-books&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/programming/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
